# This workflow will build a Java project with Maven and deploy to EC2 instance in aws

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
permissions:
    contents: write

env:
  # Use docker.io for DockerHub
  REGISTRY: docker.io
  # DockerHub repository/image
  IMAGE_NAME: avishemtov2/maven-actions

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        maven: [ '3.9.2' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: s4u/setup-maven-action@v1.17.0
      with:
        java-version: 17
        maven-version: ${{ matrix.maven }}
    
    - name: Update project version
      run: mvn -B build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT versions:commit


    - name: Commit new version
      run: |
        git config user.name AviSmashT
        git config user.email AviSmashT@github.com
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git add pom.xml
        git commit -m "Updated version"
        git push 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Login to DockerHub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}


    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


    # - name: Get project version
    #   id: get-version
    #   run: |
    #     VERSION=$(mvn -B build-helper:parse-version exec:exec \
    #       -Dexec.executable="echo" \
    #       -Dexec.args='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}')
    #     echo "version=$VERSION" >> $GITHUB_ENV


    - name: Build and push Docker image to DockerHub
      id: push
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ env.IMAGE_NAME }}:latest
        # Output the matadata from previous steps
        labels: ${{ steps.meta.outputs.labels }}
        build-args: CUR_VERSION=${{ mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec }}
      # env:
      #   CUR_VERSION: ${{ env.version }}
        

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: eu-central-1
    # - name: Initialise project and deploy terraform
    #   uses: hashicorp/setup-terraform@v3
      
    # - name: Terraform fmt
    #   id: fmt
    #   run: terraform fmt -check
    #   continue-on-error: true
    
    # - name: Terraform Init
    #   id: init
    #   run: terraform -chdir=./terraform init
    
    # - name: Terraform Validate
    #   id: validate
    #   run: terraform -chdir=./terraform validate
    
    # - name: Terraform Plan
    #   id: plan
    #   run: terraform -chdir=./terraform plan
    #   continue-on-error: true

    # - name: Terraform Apply
    #   id: apply
    #   run: terraform -chdir=./terraform apply --auto-approve=true
